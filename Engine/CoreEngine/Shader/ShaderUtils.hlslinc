float4 Mask_R(float InColor)
{
	return float4(InColor, 0, 0, 1);
};

float4 Mask_G(float InColor)
{
	return float4(0, InColor, 0, 1);
};

float4 Mask_B(float InColor)
{
	return float4(0, 0, InColor, 1);
};

float4 Mask_A(float InColor)
{
	return float4(0, 0, 0, InColor);
};

float4 Mask_RGB(float InColor)
{
	return float4(InColor, InColor, InColor, 1);
};

float dotfloat4(float4 a, float4 b)
{
	return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
}

float4 slerp(float4 v0, float4 v1, float t)
{
	// Compute the cosine of the angle between the two vectors.
	float dot = dotfloat4(v0, v1);

	const float DOT_THRESHOLD = 0.9995;
	if (abs(dot) > DOT_THRESHOLD)
	{
		// If the inputs are too close for comfort, linearly interpolate
		// and normalize the result.
		float4 result = v0 + t * (v1 - v0);
		normalize(result);
		return result;
	}

	// If the dot product is negative, the quaternions
	// have opposite handed-ness and slerp won't take
	// the shorter path. Fix by reversing one quaternion.
	if (dot < 0.0f)
	{
		v1  = -v1;
		dot = -dot;
	}

	clamp(dot, -1, 1); // Robustness: Stay within domain of acos()
	float theta_0 = acos(dot); // theta_0 = angle between input vectors
	float theta   = theta_0 * t; // theta = angle between v0 and result 

	float4 v2 = v1 - v0 * dot;
	normalize(v2); // { v0, v2 } is now an orthonormal basis

	return v0 * cos(theta) + v2 * sin(theta);
}

// https://blog.demofox.org/2016/02/19/normalized-vector-interpolation-tldr/
float3 slerp(float3 start, float3 end, float percent)
{
	// Dot product - the cosine of the angle between 2 vectors.
	float slerpDot = dot(start, end);
	// Clamp it to be in the range of Acos()
	// This may be unnecessary, but floating point
	// precision can be a fickle mistress.
	slerpDot = clamp(slerpDot, -1.0, 1.0);
	// Acos(dot) returns the angle between start and end,
	// And multiplying that by percent returns the angle between
	// start and the final result.
	float  theta       = acos(slerpDot) * percent;
	float3 RelativeVec = normalize(end - start * slerpDot); // Orthonormal basis
	// The final result.
	return ((start * cos(theta)) + (RelativeVec * sin(theta)));
}

StructuredBuffer<float4> g_BoneTransforms : register(t10);

/**
 * 버퍼로부터 본의 변환 행렬을 가져온다.
 */
float4x4 FetchBoneTransform(uint Bone)
{
	Bone *= 4;	// 4x4 행렬이므로 4를 곱해준다.
	float4 row1 = g_BoneTransforms.Load(Bone + 0);	// 4x4 행렬의 첫번째 행
	float4 row2 = g_BoneTransforms.Load(Bone + 1);	// 4x4 행렬의 두번째 행
	float4 row3 = g_BoneTransforms.Load(Bone + 2);	// 4x4 행렬의 세번째 행
	float4 row4 = g_BoneTransforms.Load(Bone + 3);	// 4x4 행렬의 네번째 행

	float4x4 Matrix = float4x4(row1, row2, row3, row4);	// 4x4 행렬 생성
	return Matrix;
}

float4x4 LerpAnimBoneMatrix(uint  BoneCount, uint Offset, uint NextOffset, uint CurrentFrame, uint NextFrame,
							float DeltaTime,
							uint  BoneIndex, float BlendWeight)
{
	bool bSameAnimation = Offset == NextOffset;

	const uint currentFrameIndex = Offset / 4 + CurrentFrame * BoneCount + BoneIndex;
	uint       nextFrameIndex    = ((bSameAnimation ? Offset : NextOffset) / 4 + NextFrame * BoneCount + BoneIndex);

	// 현재 애니메이션의 행렬
	float4x4 currentMatrix = FetchBoneTransform(currentFrameIndex);

	// 다음 애니메이션의 행렬
	float4x4 nextMatrix = FetchBoneTransform(nextFrameIndex);

	// 현재 프레임과 다음 프레임 사이 보간
	
	float4x4 lerpedMatrix = lerp(currentMatrix, nextMatrix, (bSameAnimation ? DeltaTime : BlendWeight));

	return lerpedMatrix;
}

/**
 * @brief 텍스처를 일정 속도로 x, y축으로 이동시키는 함수 (애니메이션 효과)
 * @param InTime : 게임 시간 (Delta Time 누적)
 */
float2 Panner(float2 InUV, float2 InSpeed, float InTime)
{
	// 시간 기반으로 Speed에 따라 TexCoord 좌표를 이동시킨다.
	float2 uvOffset = InUV + InSpeed * InTime;

	// frac을 이용하여 0~1 사이의 값으로 정규화한다.
	uvOffset.x = frac(uvOffset.x);
	uvOffset.y = frac(uvOffset.y);

	return uvOffset;
};

float WorldAlignedBlend(float3 InPixelNormal, float InputBlendSharpness, float InputBlendBias)
{
	// Z 축을 기준으로 법선과의 각도를 측정
	float blendFactor = dot(InPixelNormal, float3(0, -1, 0));

	// blendFactor를 0.5로 스케일링하고 Offset을 적용
	blendFactor = blendFactor * 0.5f + 0.5f;

	blendFactor = blendFactor * InputBlendSharpness;

	// BlendSharpness와 BlendBias를 사용해 값 조정
	blendFactor = blendFactor + (InputBlendBias - (InputBlendSharpness * 0.5f));


	// 결과값을 0과 1 사이로 clamp
	return clamp(blendFactor, 0.0f, 1.0f);
}

float3 ComputePointLight(float3      InWorldPos,
						 float3      InWorldNormal,
						 FPointLight InPointLight)
{
	// 빛의 방향을 계산
	float3 lightDir           = InPointLight.Position - InWorldPos;
	float3 lightDirNormalized = normalize(InPointLight.Position - InWorldPos);

	// 빛의 거리를 계산
	float lightDistance = length(lightDir);

	if (lightDistance > InPointLight.Range)
	{
		return float3(0, 0, 0);
	}

	// 빛의 강도를 계산
	float lightIntensity = saturate(1.0f - lightDistance / InPointLight.Range) * InPointLight.Intensity;

	// 빛의 강도를 계산
	float lightFactor = saturate(dot(InWorldNormal, lightDirNormalized));


	// 빛의 강도를 계산
	float3 lightColor = InPointLight.Color * lightIntensity * lightFactor;

	return lightColor;
}

float3 ComputeSpotLight(float3     InWorldPos,
						float3     InWorldNormal,
						FSpotLight InSpotLight)
{
	// 광원으로부터 표면까지의 벡터
	float3 LightDir = -normalize(InSpotLight.Position - InWorldPos);

	// 광원 방향과 표면 법선 간의 내적 계산 (Diffuse 조명)
	float DiffuseFactor = max(dot(InWorldNormal, LightDir), 0.0);

	// 표면이 SpotLight 조사각 내에 있는지 확인
	float SpotEffect = dot(LightDir, -normalize(InSpotLight.Direction)); // 광원 방향과 표면 방향 비교
	SpotEffect       = smoothstep(cos(radians(InSpotLight.SpotAngle)), 1.0, SpotEffect); // 부드러운 경계 처리

	// 광원의 범위(Range) 기반 감쇠
	float Distance         = length(InSpotLight.Position - InWorldPos);
	float RangeAttenuation = saturate(1.0 - (Distance / InSpotLight.Range)); // 선형 감쇠

	// 조명 색과 강도(Intensity) 적용
	float3 LightColor = InSpotLight.Color * InSpotLight.Intensity;

	// 최종 조명 계산
	float3 FinalLight = LightColor * DiffuseFactor * SpotEffect * RangeAttenuation;

	return FinalLight;
}

/**
 * 높이맵을 사용하여 표면의 깊이감을 표현하는 함수
 * @param uv 텍스처 좌표
 * @param viewDir  TBN 공간에서의 뷰 벡터
 * @param heightMap 높이 정보를 저장한 텍스처
 * @param heightRatio 높이 맵의 깊이를 얼마나 확대할지 결정하는 비율
 * @param minSteps 레이 행렬의 최소 샘플링 횟수
 * @param maxSteps 레이 행렬의 최대 샘플링 횟수
 * @param heightMapChannel 높이 맵 데이터가 포함된 텍스처의 채널 (예: R, G, B 중 선택)
 * @return 
 */
float2 ParallaxOcclusionMapping(
	float2 uv,
	float3 viewDir,
	float4 heightMap,
	float  heightRatio,
	int    minSteps,
	int    maxSteps,
	float  heightMapChannel // R: 0, G: 1, B: 2
)
{
	/// TBN 공간에서의 뷰 벡터를 기반으로 UV 이동 방향 계산
	float2 parallaxDir = normalize(viewDir.xy) * heightRatio;

	// 초기 값 설정
	float layerDepth   = 1.0;
	float currentDepth = 0.0;

	// UV 이동 크기 계산
	float2 deltaUV   = parallaxDir / maxSteps;
	float2 currentUV = uv;

	// 초기 빠른 샘플링: minSteps
	for (int i = 0; i < minSteps; ++i)
	{
		currentDepth += 1.0 / maxSteps;
		currentUV += deltaUV;
	}

	// 세부 탐색: maxSteps - minSteps
	float heightSample;
	for (int i = minSteps; i < maxSteps; ++i)
	{
		heightSample = heightMap[heightMapChannel];

		if (currentDepth < heightSample)
		{
			currentDepth += 1.0 / maxSteps;
			currentUV += deltaUV;
		}
		else
		{
			break;
		}
	}

	// 보간 UV 계산
	float2 prevUV     = currentUV - deltaUV;
	float  prevHeight = heightMap[heightMapChannel];

	float weight = (heightSample - currentDepth) / (heightSample - prevHeight + 0.0001);
	currentUV    = lerp(prevUV, currentUV, saturate(weight));

	return currentUV;
}

float3 BlendAngleCorrectNormal(float3 InBaseNormal, float3 InAdditionalNormal)
{
	// 입력 벡터 정규화
	InBaseNormal       = normalize(InBaseNormal);
	InAdditionalNormal = normalize(InAdditionalNormal);

	// Z 성분 추출
	float3 T1 = float3(InBaseNormal.xy, 0); // N1의 XY 성분만 사용
	float3 T2 = float3(InAdditionalNormal.xy, 0); // N2의 XY 성분만 사용

	// XY 평면에서 내적 계산
	float dotProduct = dot(T1, T2);

	// 보정 값 계산
	float3 corrected = T1 - T2 * dotProduct;

	// 보정된 노멀 벡터
	return normalize(float3(corrected.xy, InBaseNormal.z + InAdditionalNormal.z));
}

float4 WorldAlignedTexture(
	Texture2D    InTexture,
	SamplerState InSampler,
	float3       InWorldPos,
	float3       InWorldNormal,
	float        InTextureSize)
{
	// 월드 노멀의 절대값으로 축 선택 기준 계산
	float3 absNormal   = abs(InWorldNormal);
	float  totalWeight = absNormal.x + absNormal.y + absNormal.z;

	// 각 축의 텍스처 좌표 계산
	float2 uvX = InWorldPos.yz / InTextureSize;
	float2 uvY = InWorldPos.xz / InTextureSize;
	float2 uvZ = InWorldPos.xy / InTextureSize;

	// 각 축에서 텍스처 샘플링 및 가중치 적용
	float4 texX = InTexture.Sample(InSampler, uvX) * (absNormal.x / totalWeight);
	float4 texY = InTexture.Sample(InSampler, uvY) * (absNormal.y / totalWeight);
	float4 texZ = InTexture.Sample(InSampler, uvZ) * (absNormal.z / totalWeight);

	// 혼합하여 최종 텍스처 값 반환
	return texX + texY + texZ;
}


/**
 * 미세면 분산 함수
 */
float DistributionGGX(float3 N, float3 H, float roughness)
{
	float a      = roughness * roughness;
	float a2     = a * a;
	float NdotH  = max(dot(N, H), 0.0);
	float NdotH2 = NdotH * NdotH;

	float nom   = a2;
	float denom = (NdotH2 * (a2 - 1.0) + 1.0);
	denom       = 3.14159 * denom * denom;

	return nom / denom;
}

float3 F_Schlick(float3 F0, float cosTheta)
{
	return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}

float GeometrySmith(float3 N, float3 V, float3 L, float roughness)
{
	float NdotV = max(dot(N, V), 0.0);
	float NdotL = max(dot(N, L), 0.0);
	float k     = (roughness + 1.0) * (roughness + 1.0) / 8.0;

	float G1_V = NdotV / (NdotV * (1.0 - k) + k);
	float G1_L = NdotL / (NdotL * (1.0 - k) + k);

	return G1_V * G1_L;
}

float3 SpecularGGX(float3 N, float3 V, float3 L, float roughness, float3 F0)
{
	float3 H = normalize(V + L);
	float  D = DistributionGGX(N, H, roughness);
	float  G = GeometrySmith(N, V, L, roughness);
	float3 F = F_Schlick(F0, max(dot(H, V), 0.0));

	return (D * G * F) / (4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.001);
}


float3 ComputePBR(float3     baseColor,    // Base Color
				  float      metallic,      // Metallic
				  float      roughness,     // Roughness
				  float      specular,      // Specular
				  float      ao,            // Ambient AO
				  float3     N,            // Normal (in world space)
				  float3     V,            // View direction (normalized)
				  float3     L,            // Light direction (normalized)
				  float3     lightColor,   // Light color
				  out float3 albedo    // Output diffuse term for debugging
)
{
	const float PI = 3.14159265359;

	// Roughness 처리
	roughness   = clamp(roughness, 0.04, 1.0);
	float alpha = roughness * roughness;

	// Halfway 벡터 계산
	float3 H = normalize(V + L);

	// Fresnel 계산
	float3 F0 = lerp(float3(specular, specular, specular), baseColor, metallic);
	float3 F  = F0 + (1.0 - F0) * pow(1.0 - dot(H, V), 5.0);

	// GGX Geometry Function
	float NdotV = max(dot(N, V), 0.0);
	float NdotL = max(dot(N, L), 0.0);
	float NdotH = max(dot(N, H), 0.0);

	float G1 = NdotV / (NdotV * (1.0 - alpha) + alpha);
	float G2 = NdotL / (NdotL * (1.0 - alpha) + alpha);
	float G  = G1 * G2;

	// GGX Normal Distribution Function
	float D = alpha / (PI * pow(NdotH * NdotH * (alpha - 1.0) + 1.0, 2.0));

	// Specular BRDF
	float3 specularBRDF = (F * G * D) / (4.0 * NdotV * NdotL + 0.001);

	// Diffuse BRDF
	float3 diffuseBRDF = (1.0 - F) * baseColor * (1.0 - metallic) / PI;

	// Ambient AO 적용
	diffuseBRDF *= ao;
	specularBRDF *= ao;

	// 최종 조합
	albedo          = diffuseBRDF * NdotL;
	float3 lighting = (diffuseBRDF + specularBRDF) * NdotL * lightColor;

	return lighting;
}
